name: Deploy Service
on: 
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      account:
        required: true
        type: string
      commit_hash:
        type: string
      api_test_env_vars:
        type: string
      pre_script:
        type: string
      track_deployment:
        type: boolean
        default: true
      working_directory:
        type: string
        default: "."
    secrets:
      aws_key:
        required: true
      aws_secret:
        required: true
      region:
        required: true
      api_test_secret_vars:

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret }}
  AWS_DEFAULT_REGION: ${{ secrets.region }}
  DEPLOY_SERVICE: ${{ inputs.service }}
  DEPLOY_ACCOUNT: ${{ inputs.account }}
  API_TEST_ENV_VARS: ${{ inputs.api_test_env_vars }}
  API_TEST_SECRET_VARS: ${{ secrets.api_test_secret_vars }}
  TF_VAR_commit_sha: ${{ github.sha }}${{ github.run_attempt }}
jobs:
  deploy-service:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: recipopdev/github-workflows
          path: github-workflows
      
      - name: Pre Script
        if: ${{ inputs.pre_script != '' }}
        id: pre-script
        run: powershell ${{ inputs.pre_script }}
        working-directory: ${{ inputs.working_directory }}

      - name: Copy deployment scripts
        id: deployment-scripts
        run: |
          copy github-workflows\scripts\python\*.py ${{ inputs.working_directory }}\deploy\

      - name: Install dependencies
        id: dependencies
        run: pip3 install --user Jinja2 PyYAML boto3 packaging prometheus_client
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Report Running Pipeline
        id: pipeline-reporting-running
        run: python3 pipeline_reporting.py --service $env:DEPLOY_SERVICE --environment $env:DEPLOY_ACCOUNT --running
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Fetch version
        id: fetch-version
        run: |
          python3 versioning.py --service $env:DEPLOY_SERVICE --fetch
          if ($env:DEPLOY_ACCOUNT -eq "uat")
          {
            npm version patch
          }
          if ($env:DEPLOY_ACCOUNT -eq "production")
          {
            npm version minor
          }
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Generate ECR token
        id: token
        run: python3 ecr_authenticate.py --environment $env:DEPLOY_ACCOUNT
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Bootstrap terraform files
        id: bootstrap
        run: python3 bootstrap.py;
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Prepare deployment files
        id: prepare
        run: |
          copy ${{ inputs.working_directory }}\deploy\*.tf* ${{ inputs.working_directory }}\
          copy ${{ inputs.working_directory }}\deploy\package.json ${{ inputs.working_directory }}\

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -diff
        working-directory: ${{ inputs.working_directory }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false
        working-directory: ${{ inputs.working_directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ inputs.working_directory }}

      - name: Select Workspace
        id: workspace
        run: |
          if ($env:DEPLOY_ACCOUNT -eq "uat")
          {
            terraform workspace select uat
          }
          if ($env:DEPLOY_ACCOUNT -eq "production")
          {
            terraform workspace select prod
          }
        working-directory: ${{ inputs.working_directory }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ inputs.working_directory }}

      - name: Commit version
        id: commit-version
        if: ${{ inputs.account != 'development' }}
        run: |
          python3 versioning.py --service $env:DEPLOY_SERVICE --save
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Terraform Confirm
        id: confirm
        run: terraform plan -input=false -detailed-exitcode
        working-directory: ${{ inputs.working_directory }}

      - name: Track deployment rollout
        if: inputs.track_deployment == true
        id: track-rollout
        run: python3 track_deployment.py --service $env:DEPLOY_SERVICE --environment $env:DEPLOY_ACCOUNT
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Combining API Test Environment Variables
        if: |
          inputs.api_test_env_vars != '' &&
          inputs.track_deployment == true
        id: combine-api-vars
        run: |
          $API_TEST_VARS=$("$env:API_TEST_ENV_VARS")
          if ($env:API_TEST_SECRET_VARS -ne "")
          {
            $API_TEST_VARS=$("$env:API_TEST_ENV_VARS`r`n$env:API_TEST_SECRET_VARS" | jq -s 'add' --raw-output)
          }
          echo "::set-output name=api-test-vars::$($API_TEST_VARS)"
        working-directory: ${{ inputs.working_directory }}

      - name: Run API Tests
        if: |
          inputs.api_test_env_vars != '' &&
          inputs.track_deployment == true
        id: run-tests
        uses: matt-ball/newman-action@master
        with:
          collection: deploy/tests/tests.json
          envVar: ${{ steps.combine-api-vars.outputs.api-test-vars }}

      - name: Report Successful Pipeline
        id: pipeline-reporting-success
        run: python3 pipeline_reporting.py --service $env:DEPLOY_SERVICE --environment $env:DEPLOY_ACCOUNT --success
        working-directory: ${{ inputs.working_directory }}\deploy\

      - name: Report Failed Pipeline
        if: cancelled() || failure()
        id: pipeline-reporting-failure
        run: python3 pipeline_reporting.py --service $env:DEPLOY_SERVICE --environment $env:DEPLOY_ACCOUNT --failure
        working-directory: ${{ inputs.working_directory }}\deploy\
