name: Deploy Service
on: 
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      account:
        required: true
        type: string
      commit_hash:
        required: true
        type: string
      sonar_scan_path:
        type: string
      api_test_env_vars:
        required: true
        type: string
    secrets:
      aws_key:
        required: true
      aws_secret:
        required: true
      region:
        required: true
      sonar_token:
      

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret }}
  AWS_DEFAULT_REGION: ${{ secrets.region }}
  DEPLOY_SERVICE: ${{ inputs.service }}
  DEPLOY_ACCOUNT: ${{ inputs.account }}
  SONAR_SCAN_PATH: ${{ inputs.sonar_scan_path }}
  SONAR_TOKEN: ${{ secrets.sonar_token }}
  TF_VAR_commit_sha: ${{ inputs.commit_hash }}
jobs:
  deploy-service:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: recipopdev/github-workflows
          path: github-workflows

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false

      - name: Copy deployment scripts
        id: deployment-scripts
        run: cp github-workflows/scripts/linux/*.sh deploy/

      - name: Fetch & iterate version
        id: iterate-version
        run: |
          bash versioning.sh get_service_version $DEPLOY_SERVICE
          if [[ $DEPLOY_ACCOUNT == "uat" ]]; then
            npm version patch
          fi
          if [[ $DEPLOY_ACCOUNT == "production" ]]; then
            npm version minor
          fi
        working-directory: deploy/

      - name: Install dependencies
        id: dependencies
        run: pip3 install --user Jinja2 PyYAML boto3
        working-directory: deploy/

      - name: Generate ECR token
        id: token
        run: bash authenticate.sh $(echo "."$DEPLOY_ACCOUNT"_account")
        working-directory: deploy/

      - name: Bootstrap terraform files
        id: bootstrap
        run: python3 bootstrap.py;
        working-directory: deploy/

      - name: Prepare deployment files
        id: prepare
        run: |
          cp ./deploy/*.tf* .
          cp ./deploy/package.json .

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Select Workspace
        id: workspace
        run: |
          if [[ $DEPLOY_ACCOUNT == "uat" ]]; then
            terraform workspace select uat
          fi
          if [[ $DEPLOY_ACCOUNT == "production" ]]; then
            terraform workspace select prod
          fi

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Terraform Confirm
        id: confirm
        run: terraform plan -input=false -detailed-exitcode

      - name: Scan Docker Image
        id: image-scan
        run: bash image_scan.sh $(echo "."$DEPLOY_ACCOUNT"_account")
        working-directory: deploy/

      - name: Sonar Scan
        if: ${{ inputs.sonar_scan_path != '' }}
        id: sonar-scan
        run: docker run -e SONAR_HOST_URL="https://sonarqube.mgmt.newadimo.co" -e SONAR_LOGIN=$SONAR_TOKEN -v "$(pwd)/"$SONAR_SCAN_PATH":/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=$DEPLOY_SERVICE

      - name: Track deployment rollout
        id: track-rollout
        run: bash track_deployment.sh $(echo "."$DEPLOY_ACCOUNT"_account") $DEPLOY_SERVICE
        working-directory: deploy/

      - name: Run API Tests
        id: run-tests
        uses: matt-ball/newman-action@master
        with:
          collection: deploy/tests/tests.json
          envVar: ${{ inputs.api_test_env_vars }}

      - name: Commit version
        id: commit-version
        run: |
          if [[ $DEPLOY_ACCOUNT != "development" ]]; then
            bash versioning.sh set_service_version $DEPLOY_SERVICE
          fi
        working-directory: deploy/
